buildscript {
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.20'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.17.1'
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.22.0'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.7.20'
  }

  ext.versions = [
    'coroutines': '1.6.4',
  ]
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
kotlin {
  explicitApi()

  js {
    nodejs()
  }

  jvm()

  iosArm32()
  iosArm64()
  iosX64()
  iosSimulatorArm64()
  linuxX64()
  macosX64()
  macosArm64()
  mingwX64()
  tvosArm64()
  tvosX64()
  tvosSimulatorArm64()
  watchosArm32()
  watchosArm64()
  watchosX86()
  watchosX64()
  watchosSimulatorArm64()

  sourceSets {
    commonMain {
      dependencies {
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
      }
    }
  }

  sourceSets.matching { it.name.endsWith("Test") }.all {
    it.languageSettings {
      optIn('kotlinx.coroutines.DelicateCoroutinesApi')
      optIn('kotlinx.coroutines.InternalCoroutinesApi')
      optIn('kotlinx.coroutines.ExperimentalCoroutinesApi')
    }
  }

  // Add a test binary and execution for native targets which runs on a background thread.
  targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests).all {
    binaries {
      test('background', [org.jetbrains.kotlin.gradle.plugin.mpp.NativeBuildType.DEBUG]) {
        freeCompilerArgs += [
          "-trw"
        ]
      }
    }
    testRuns {
      background {
        setExecutionSourceFrom(binaries.getByName("backgroundDebugTest"))
      }
    }
  }
}

apply plugin: 'com.diffplug.spotless'
spotless {
  kotlin {
    ktlint('0.37.2').userData([
      // TODO this should all come from editorconfig https://github.com/diffplug/spotless/issues/142
      'indent_size': '2',
      'kotlin_imports_layout': 'ascii',
    ])
  }
}

apply plugin: 'com.vanniktech.maven.publish'
signing {
  def signingKey = findProperty('signingKey')
  def signingPassword = ''
  useInMemoryPgpKeys(signingKey, signingPassword)
}

apply plugin: 'org.jetbrains.dokka'
dokkaHtml {
  dokkaSourceSets {
    configureEach {
      skipDeprecated.set(true)
      externalDocumentationLink {
        url.set(new URL('https://kotlin.github.io/kotlinx.coroutines/'))
      }
    }
  }
}

buildscript {
  repositories {
    mavenCentral()
  }
}
repositories {
  mavenCentral()
}
