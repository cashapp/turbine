import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinJvmCompilation

plugins {
  alias(libs.plugins.kotlin)
  alias(libs.plugins.kotlinApiDump)
  alias(libs.plugins.spotless)
  alias(libs.plugins.publish)
  alias(libs.plugins.dokka)
}

kotlin {
  explicitApi()

  js {
    nodejs {
      testTask {
        useMocha {
          timeout = "5s"
        }
      }
    }
  }

  jvm {
    compilations.configureEach { KotlinJvmCompilation compilation ->
      compilation.compilerOptions.options.jvmTarget = JvmTarget.JVM_1_8
    }
  }

  androidNativeArm32()
  androidNativeArm64()
  androidNativeX86()
  androidNativeX64()
  iosArm32()
  iosArm64()
  iosX64()
  iosSimulatorArm64()
  linuxX64()
  linuxArm64()
  macosX64()
  macosArm64()
  mingwX64()
  tvosArm64()
  tvosX64()
  tvosSimulatorArm64()
  watchosArm32()
  watchosArm64()
  watchosX86()
  watchosX64()
  watchosDeviceArm64()
  watchosSimulatorArm64()

  sourceSets {
    commonMain {
      dependencies {
        api libs.coroutines.core
        implementation libs.coroutines.test
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
      }
    }
    nonJvmTest {
      dependsOn(commonTest)
    }
  }

  sourceSets.matching { it.name.endsWith("Test") }.configureEach {
    it.languageSettings {
      optIn('kotlinx.coroutines.DelicateCoroutinesApi')
      optIn('kotlinx.coroutines.InternalCoroutinesApi')
      optIn('kotlinx.coroutines.ExperimentalCoroutinesApi')
    }
  }

  targets.each { target ->
    if (target.platformType == KotlinPlatformType.common) return
    if (target.platformType != KotlinPlatformType.jvm) {
      target.compilations.test.defaultSourceSet.dependsOn(sourceSets.nonJvmTest)
    }
  }
}

spotless {
  kotlin {
    target("src/**/*.kt")
    ktlint('0.48.2').editorConfigOverride([
      'ktlint_standard_filename': 'disabled',
    ])
  }
}

dokkaHtml {
  dokkaSourceSets {
    configureEach {
      skipDeprecated.set(true)
      externalDocumentationLink {
        url.set(new URL('https://kotlin.github.io/kotlinx.coroutines/'))
      }
    }
  }
}
