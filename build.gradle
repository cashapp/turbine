buildscript {
  dependencies {
    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:5.1.0'
    classpath 'com.vanniktech:gradle-maven-publish-plugin:0.14.2'
    classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.30'
  }

  ext.versions = [
    'coroutines': '1.5.0-RC',
  ]
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
kotlin {
  js {
    nodejs()
  }

  jvm()

  iosArm32()
  iosArm64()
  iosX64()
  linuxX64()
  macosX64()
  mingwX64()
  tvosArm64()
  tvosX64()
  watchosArm32()
  watchosArm64()
  watchosX86()

  sourceSets {
    commonMain {
      dependencies {
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
      }
    }
    commonTest {
      dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-test'
      }
    }

    jvmTest {
      dependencies {
        implementation 'junit:junit:4.13'
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
      }
    }

    nativeMain {
    }
    nativeTest {
    }

    configure([
      targets.iosArm32,
      targets.iosArm64,
      targets.iosX64,
      targets.linuxX64,
      targets.macosX64,
      targets.mingwX64,
      targets.tvosArm64,
      targets.tvosX64,
      targets.watchosArm32,
      targets.watchosArm64,
      targets.watchosX86,
    ]) {
      compilations.main.source(sourceSets.nativeMain)
      compilations.test.source(sourceSets.nativeTest)
    }
  }

  sourceSets.matching { it.name.endsWith("Test") }.all {
    it.languageSettings {
      useExperimentalAnnotation('kotlin.time.ExperimentalTime')
      useExperimentalAnnotation('kotlinx.coroutines.DelicateCoroutinesApi')
      useExperimentalAnnotation('kotlinx.coroutines.ExperimentalCoroutinesApi')
    }
  }
}

apply plugin: 'com.diffplug.spotless'
spotless {
  kotlin {
    ktlint('0.37.2').userData([
      // TODO this should all come from editorconfig https://github.com/diffplug/spotless/issues/142
      'indent_size': '2',
      'kotlin_imports_layout': 'ascii',
    ])
  }
}

apply plugin: 'com.vanniktech.maven.publish'
signing {
  def signingKey = findProperty('signingKey')
  def signingPassword = ''
  useInMemoryPgpKeys(signingKey, signingPassword)
}

apply plugin: 'org.jetbrains.dokka'
tasks.withType(org.jetbrains.dokka.gradle.DokkaTask).configureEach { task ->
  task.dokkaSourceSets {
    configureEach {
      externalDocumentationLink {
        url.set(new URL('https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/'))
      }
    }
  }
}

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
}
repositories {
  mavenCentral()
  jcenter()
}
